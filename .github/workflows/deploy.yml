name: Deploy to Production

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies (Backend)
      run: |
        cd backend
        rm -rf node_modules package-lock.json || true
        npm install --no-optional

    - name: Install dependencies (Frontend)
      run: |
        cd frontend
        rm -rf node_modules package-lock.json || true
        npm install --no-optional

    - name: Run backend tests (if available)
      run: |
        cd backend
        npm test || echo "No tests found, skipping..."

    - name: Run frontend tests (if available)
      run: |
        cd frontend
        npm test || echo "No tests found, skipping..."

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Build backend
      run: |
        cd backend
        npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          frontend/dist
          backend/dist
          backend/package.json
          backend/node_modules
        retention-days: 1

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: build-files/

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

    - name: Deploy to server
      env:
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
      run: |
        # Create SSH script
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e

        DEPLOY_DIR="/home/$SERVER_USER/warung-manager"
        BACKUP_DIR="/home/$SERVER_USER/warung-manager-backup"
        SERVICE_NAME="warung-manager"

        echo "🚀 Starting deployment to $SERVER_HOST..."

        # Create backup of current deployment
        if [ -d "$DEPLOY_DIR" ]; then
          echo "📦 Creating backup..."
          rm -rf "$BACKUP_DIR"
          cp -r "$DEPLOY_DIR" "$BACKUP_DIR"
        fi

        # Create deployment directory
        echo "📁 Setting up deployment directory..."
        ssh $SERVER_USER@$SERVER_HOST "mkdir -p $DEPLOY_DIR/{backend,frontend,database,logs}"

        # Upload files
        echo "📤 Uploading files..."
        scp -o StrictHostKeyChecking=no build-files/backend/* $SERVER_USER@$SERVER_HOST:$DEPLOY_DIR/backend/
        scp -o StrictHostKeyChecking=no -r build-files/frontend/dist $SERVER_USER@$SERVER_HOST:$DEPLOY_DIR/frontend/

        # Create production environment files
        echo "🔧 Setting up environment..."
        ssh $SERVER_USER@$SERVER_HOST "cat > $DEPLOY_DIR/backend/.production.env << ENVEOF
        NODE_ENV=production
        PORT=3001
        DATABASE_URL=$DATABASE_URL
        JWT_SECRET=$JWT_SECRET
        CORS_ORIGIN=https://webartisan.id
        ENVEOF"

        # Install PM2 if not exists
        echo "📦 Ensuring PM2 is installed..."
        ssh $SERVER_USER@$SERVER_HOST "npm list -g pm2 || npm install -g pm2"

        # Install backend dependencies
        echo "📦 Installing backend dependencies..."
        ssh $SERVER_USER@$SERVER_HOST "cd $DEPLOY_DIR/backend && npm install --omit=dev --no-optional"

        # Run database migrations
        echo "🗄️ Running database migrations..."
        ssh $SERVER_USER@$SERVER_HOST "cd $DEPLOY_DIR/backend && npm run db:migrate || echo 'No migration script found'"

        # Create PM2 ecosystem file
        echo "⚙️ Creating PM2 configuration..."
        ssh $SERVER_USER@$SERVER_HOST "cat > $DEPLOY_DIR/ecosystem.config.js << ECOEOF
        module.exports = {
          apps: [{
            name: 'warung-manager-api',
            script: './backend/dist/index.js',
            cwd: '$DEPLOY_DIR',
            instances: 1,
            exec_mode: 'cluster',
            env: {
              NODE_ENV: 'production',
              PORT: 3001
            },
            error_file: './logs/api-error.log',
            out_file: './logs/api-out.log',
            log_file: './logs/api-combined.log',
            time: true,
            max_memory_restart: '1G',
            node_args: '--max-old-space-size=1024'
          }]
        };
        ECOEOF"

        # Start/restart application with PM2
        echo "🔄 Starting application..."
        ssh $SERVER_USER@$SERVER_HOST "cd $DEPLOY_DIR && pm2 reload ecosystem.config.js || pm2 start ecosystem.config.js"
        ssh $SERVER_USER@$SERVER_HOST "pm2 save"
        ssh $SERVER_USER@$SERVER_HOST "pm2 startup"

        # Setup nginx (if not exists)
        echo "🌐 Setting up nginx..."
        ssh $SERVER_USER@$SERVER_HOST "sudo mkdir -p /etc/nginx/sites-available"

        # Create nginx configuration
        ssh $SERVER_USER@$SERVER_HOST "sudo cat > /etc/nginx/sites-available/warung-manager << NGINXEOF
        server {
            listen 80;
            server_name webartisan.id;

            # Frontend
            location /products/warung-manager {
                alias $DEPLOY_DIR/frontend/dist;
                try_files \$uri \$uri/ /products/warung-manager/index.html;

                # Cache static assets
                location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                    expires 1y;
                    add_header Cache-Control \"public, immutable\";
                }
            }

            # Backend API
            location /api {
                proxy_pass http://localhost:3001;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
                proxy_cache_bypass \$http_upgrade;

                # CORS headers
                add_header Access-Control-Allow-Origin \"https://webartisan.id\";
                add_header Access-Control-Allow-Methods \"GET, POST, PUT, DELETE, OPTIONS\";
                add_header Access-Control-Allow-Headers \"DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization\";
            }

            # Health check
            location /health {
                proxy_pass http://localhost:3001/health;
            }
        }
        NGINXEOF"

        # Enable site
        ssh $SERVER_USER@$SERVER_HOST "sudo ln -sf /etc/nginx/sites-available/warung-manager /etc/nginx/sites-enabled/"
        ssh $SERVER_USER@$SERVER_HOST "sudo nginx -t && sudo systemctl reload nginx || echo 'Nginx reload failed, continuing...'"

        echo "✅ Deployment completed successfully!"
        echo "🌐 App available at: https://webartisan.id/products/warung-manager"
        echo "🔧 API available at: https://webartisan.id/api"
        EOF

        # Make deploy script executable and run it
        chmod +x deploy.sh
        ./deploy.sh

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: Wait for deployment
      run: sleep 30

    - name: Check API health
      run: |
        echo "🏥 Checking API health..."
        response=$(curl -s -o /dev/null -w "%{http_code}" https://webartisan.id/health)
        if [ $response -eq 200 ]; then
          echo "✅ API is healthy!"
        else
          echo "❌ API health check failed with status: $response"
          exit 1
        fi

    - name: Check frontend
      run: |
        echo "🌐 Checking frontend..."
        response=$(curl -s -o /dev/null -w "%{http_code}" https://webartisan.id/products/warung-manager)
        if [ $response -eq 200 ]; then
          echo "✅ Frontend is accessible!"
        else
          echo "❌ Frontend check failed with status: $response"
          exit 1
        fi

    - name: Notify success
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "🌐 Frontend: https://webartisan.id/products/warung-manager"
        echo "🔧 API: https://webartisan.id/api"
        echo "📊 Health: https://webartisan.id/health"